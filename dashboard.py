import os
import logging
import asyncio
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
import telegram

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_NAME = "dashboard"

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
COINGLASS_API_KEY = os.getenv("COINGLASS_API_KEY")

MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(BOT_NAME)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
async def fetch_coinglass_data():
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Coinglass —á–µ—Ä–µ–∑ API...")
    if not COINGLASS_API_KEY:
        logger.error("COINGLASS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Coinglass –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return None

    symbols = ["BTC", "ETH", "XRP"]
    coinglass_data = {}
    headers = {
        "accept": "application/json",
        "coinglassSecret": COINGLASS_API_KEY
    }

    coingecko_prices = await fetch_coingecko_data()
    if not coingecko_prices:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å CoinGecko. –¶–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ N/A.")
        coingecko_prices = {"BTC": {"price": "N/A", "change_24h": "N/A"}, 
                            "ETH": {"price": "N/A", "change_24h": "N/A"}, 
                            "XRP": {"price": "N/A", "change_24h": "N/A"},
                            "btc_dominance": "N/A"}

    async with aiohttp.ClientSession(headers=headers) as session:
        for symbol in symbols:
            try:
                current_price_data = coingecko_prices.get(symbol, {"price": "N/A", "change_24h": "N/A"})
                current_price = current_price_data.get("price", "N/A")
                change_24h = current_price_data.get("change_24h", "N/A")

                overview_url = f"https://open-api.coinglass.com/api/pro/v1/futures/openInterest?symbol={symbol}"
                async with session.get(overview_url) as response:
                    response.raise_for_status()
                    data = await response.json()
                    if data and data.get("success") and data.get("data"):
                        latest_data = data["data"]
                        coinglass_data[symbol] = {
                            "current_price": current_price,
                            "change_24h": change_24h,
                            "volume_24h": latest_data.get("totalVolume", "N/A"),
                            "open_interest": latest_data.get("openInterest", "N/A"),
                            "long_liquidations_24h": "N/A",
                            "short_liquidations_24h": "N/A",
                            "total_liquidations_24h": "N/A"
                        }
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º –¥–ª—è {symbol} —Å Coinglass API.")
                        coinglass_data[symbol] = {
                            "current_price": current_price, "change_24h": change_24h, "volume_24h": "N/A", "open_interest": "N/A",
                            "long_liquidations_24h": "N/A", "short_liquidations_24h": "N/A", "total_liquidations_24h": "N/A"
                        }

                liquidations_url = f"https://open-api.coinglass.com/api/pro/v1/liquidation/history?symbol={symbol}&interval=h24"
                async with session.get(liquidations_url) as response:
                    response.raise_for_status()
                    data = await response.json()
                    if data and data.get("success") and data.get("data"):
                        if data["data"]:
                            latest_liquidation_data = data["data"][0]
                            coinglass_data[symbol]["long_liquidations_24h"] = latest_liquidation_data.get("longLiquidation", "N/A")
                            coinglass_data[symbol]["short_liquidations_24h"] = latest_liquidation_data.get("shortLiquidation", "N/A")
                            coinglass_data[symbol]["total_liquidations_24h"] = latest_liquidation_data.get("totalLiquidation", "N/A")
                        else:
                            logger.warning(f"–î–∞–Ω–Ω—ã–µ –ø–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è–º –¥–ª—è {symbol} –∑–∞ 24—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è–º –¥–ª—è {symbol} –∑–∞ 24—á —Å Coinglass API.")

            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Coinglass API –¥–ª—è {symbol}: {e}")
                coinglass_data[symbol] = {
                    "current_price": current_price, "change_24h": change_24h, "volume_24h": "N/A", "open_interest": "N/A",
                    "long_liquidations_24h": "N/A", "short_liquidations_24h": "N/A", "total_liquidations_24h": "N/A"
                }
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Coinglass –¥–ª—è {symbol}: {e}")
                coinglass_data[symbol] = {
                    "current_price": current_price, "change_24h": change_24h, "volume_24h": "N/A", "open_interest": "N/A",
                    "long_liquidations_24h": "N/A", "short_liquidations_24h": "N/A", "total_liquidations_24h": "N/A"
                }
        
    logger.info("–î–∞–Ω–Ω—ã–µ Coinglass —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ API.")
    return coinglass_data

async def fetch_fear_greed_index():
    logger.info("–ó–∞–ø—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ —Å alternative.me...")
    url = "https://api.alternative.me/fng/?limit=1"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                data = await response.json()
                # logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {data}") # –£–¥–∞–ª–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥

                if data and data.get("data"):
                    latest_data = data["data"][0]
                    return {
                        "value": latest_data.get("value"),
                        "value_classification": latest_data.get("value_classification"),
                        "timestamp": latest_data.get("timestamp")
                    }
                return None
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ alternative.me API: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ alternative.me API: {e}")
    return None

async def fetch_coingecko_data():
    logger.info("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko...")
    base_url_prices = "https://api.coingecko.com/api/v3/simple/price"
    params_prices = {
        "ids": "bitcoin,ethereum,ripple",
        "vs_currencies": "usd",
        "include_24hr_change": "true"
    }

    base_url_global = "https://api.coingecko.com/api/v3/global"

    prices_data = None
    global_data = None

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(base_url_prices, params=params_prices) as response:
                response.raise_for_status()
                prices_data = await response.json()

            async with session.get(base_url_global) as response:
                response.raise_for_status()
                global_data = await response.json()

        result = {
            "BTC": {
                "price": prices_data.get("bitcoin", {}).get("usd"),
                "change_24h": prices_data.get("bitcoin", {}).get("usd_24h_change"),
            },
            "ETH": {
                "price": prices_data.get("ethereum", {}).get("usd"),
                "change_24h": prices_data.get("ethereum", {}).get("usd_24h_change"),
            },
            "XRP": {
                "price": prices_data.get("ripple", {}).get("usd"),
                "change_24h": prices_data.get("ripple", {}).get("usd_24h_change"),
            },
            "btc_dominance": global_data.get("data", {}).get("market_cap_percentage", {}).get("btc") if global_data else "N/A"
        }
        return result
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ CoinGecko API: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ CoinGecko API: {e}")
    return None

async def generate_dashboard_post(coinglass_data, fear_greed_data=None, coingecko_data=None):
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")

    if not coinglass_data and not fear_greed_data and not coingecko_data:
        return "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    current_datetime_str = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M")
    post_parts = [f"üìä –î–∞—à–±–æ—Ä–¥ ‚Äî {current_datetime_str} MSK\n"]

    if coinglass_data:
        for symbol, data in coinglass_data.items():
            post_parts.append(f"{symbol}: ")
            price = data.get("current_price", "N/A")
            change_24h = data.get("change_24h", "N/A")
            
            if isinstance(price, (int, float)) and isinstance(change_24h, (int, float)):
                escaped_price_formatted = f"{price:.2f}"
                escaped_change_24h_formatted = f"{change_24h:.2f}"
                post_parts.append(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {escaped_price_formatted} {escaped_change_24h_formatted}% ")
            else:
                escaped_price = price
                escaped_change_24h = change_24h
                post_parts.append(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {escaped_price} {escaped_change_24h}%" if escaped_change_24h != 'N/A' else '')

            post_parts.append(f"–û–±—ä–µ–º 24—á: {data.get("volume_24h", "N/A")}")
            post_parts.append(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ 24—á (–æ–±—â–∏–µ): {data.get("total_liquidations_24h", "N/A")}")
            post_parts.append(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ª–æ–Ω–≥ 24—á: {data.get("long_liquidations_24h", "N/A")}")
            post_parts.append(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —à–æ—Ä—Ç 24—á: {data.get("short_liquidations_24h", "N/A")}")
            post_parts.append(f"–û—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å (OI): {data.get("open_interest", "N/A")}\n")
    else:
        post_parts.append("–î–∞–Ω–Ω—ã–µ Coinglass –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n")

    if coingecko_data and coingecko_data.get("btc_dominance") is not None and coingecko_data.get("btc_dominance") != "N/A":
        btc_dominance = coingecko_data.get("btc_dominance")
        if isinstance(btc_dominance, (int, float)):
            escaped_btc_dominance_formatted = f"{btc_dominance:.2f}"
            post_parts.append(f"–î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {escaped_btc_dominance_formatted}%\n")
        else:
            escaped_btc_dominance = str(btc_dominance)
            post_parts.append(f"–î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {escaped_btc_dominance}%\n")
    elif coingecko_data:
        post_parts.append("–î–æ–º–∏–Ω–∞—Ü–∏—è BTC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n")
    
    if fear_greed_data:
        fear_greed_value = fear_greed_data.get('value', 'N/A')
        fear_greed_classification = fear_greed_data.get('value_classification', 'N/A')
        post_parts.append(f"–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {fear_greed_value} {fear_greed_classification}\n")
    else:
        post_parts.append("–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n")

    final_post = "\n".join(post_parts)
    logger.info("–ü–æ—Å—Ç –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
    return final_post

async def publish_post_to_channel(bot, post_text):
    max_length = 4000
    chunks = []
    current_chunk = ""

    paragraphs = post_text.split('\n\n')

    for para in paragraphs:
        if len(current_chunk) + len(para) + 2 <= max_length:
            current_chunk += (para + '\n\n')
        else:
            if current_chunk:
                chunks.append(current_chunk)
            current_chunk = para + '\n\n'
    if current_chunk:
        chunks.append(current_chunk)

    if not chunks:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –ø–æ—Å—Ç.")
        return False

    for i, chunk in enumerate(chunks):
        try:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=chunk.strip(),
                disable_web_page_preview=False,
            )
            if i < len(chunks) - 1:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
            await bot.send_message(chat_id=ADMIN_ID, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
            return False
    return True

async def autopost_dashboard(app: Application):
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    bot = app.bot
    
    if ADMIN_ID not in app.bot_data:
        app.bot_data[ADMIN_ID] = {}
    
    coinglass_data_api = await fetch_coinglass_data()
    fear_greed_data = await fetch_fear_greed_index()
    coingecko_data = await fetch_coingecko_data() # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CoinGecko –Ω–∞–ø—Ä—è–º—É—é

    if COINGLASS_API_KEY is None or COINGLASS_API_KEY == "":
        logger.warning("COINGLASS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω. –°–æ–æ–±—â–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        if ADMIN_ID:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=(
                    "‚ö†Ô∏è Coinglass API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ `COINGLASS_API_KEY` –≤ —Ñ–∞–π–ª–µ `.env`, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. "
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Coinglass –æ—Ç–º–µ–Ω–µ–Ω–∞." 
                ),
            )
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        
    if coinglass_data_api is None:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Coinglass API. –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω. –°–æ–æ–±—â–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        if ADMIN_ID:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=(
                    "‚ùå –û—à–∏–±–∫–∞ Coinglass API!\n\n"
                    "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Coinglass API –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Coinglass –æ—Ç–º–µ–Ω–µ–Ω–∞." 
                ),
            )
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    else:
        logger.info("–î–∞–Ω–Ω—ã–µ Coinglass —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ API. –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
        post_to_publish = await generate_dashboard_post(coinglass_data_api, fear_greed_data, coingecko_data)

    if post_to_publish:
        if await publish_post_to_channel(bot, post_to_publish):
            logger.info(f"–ü–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ {ADMIN_ID}.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {ADMIN_ID}.")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {ADMIN_ID}.")
    
    logger.info("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.")

async def on_startup(app: Application):
    logger.info("Dashboard –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)
    # scheduler.add_job(
    #     autopost_dashboard,
    #     "cron",
    #     hour=8,
    #     minute=0,
    #     timezone=MOSCOW_TZ,
    #     args=(app,)
    # )
    scheduler.start()
    app.bot_data["scheduler"] = scheduler
    if ADMIN_ID not in app.bot_data:
        app.bot_data[ADMIN_ID] = {}
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–ø—É—â–µ–Ω.")

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def handle_non_admin_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await update.message.reply_text("–≠—Ç–æ dashboard –¥–ª—è –∫–∞–Ω–∞–ª–∞ @nevernicce_trade, –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—à—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @nevernicce.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–≠—Ç–æ dashboard –¥–ª—è –∫–∞–Ω–∞–ª–∞ @nevernicce_trade, –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—à—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @nevernicce.")

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /test –ø–æ–ª—É—á–µ–Ω–∞")
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É autopost_dashboard –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    coinglass_data_api = await fetch_coinglass_data()
    fear_greed_data = await fetch_fear_greed_index()
    coingecko_data = await fetch_coingecko_data() # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CoinGecko –Ω–∞–ø—Ä—è–º—É—é

    if COINGLASS_API_KEY is None or COINGLASS_API_KEY == "":
        logger.warning("COINGLASS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /test. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–æ–æ–±—â–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await update.message.reply_text(
            "‚ö†Ô∏è Coinglass API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ `COINGLASS_API_KEY` –≤ —Ñ–∞–π–ª–µ `.env`, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. "
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞." 
        )
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /test
    elif coinglass_data_api is None:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Coinglass API –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /test. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–æ–æ–±—â–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ Coinglass API!\n\n"
            "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Coinglass API –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞." 
        )
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /test
    else:
        logger.info("–î–∞–Ω–Ω—ã–µ Coinglass —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ API –¥–ª—è /test. –ü—Ä–æ–¥–æ–ª–∂–∞—é.")
        post_to_send = await generate_dashboard_post(coinglass_data_api, fear_greed_data, coingecko_data)

    if post_to_send:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=post_to_send,
                disable_web_page_preview=False,
            )
            logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
            await update.message.reply_text("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {ADMIN_ID}.")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞.")

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /report –ø–æ–ª—É—á–µ–Ω–∞")
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É autopost_dashboard –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    bot = context.bot # –î–ª—è publish_post_to_channel
    
    coinglass_data_api = await fetch_coinglass_data()
    fear_greed_data = await fetch_fear_greed_index()
    coingecko_data = await fetch_coingecko_data() # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CoinGecko –Ω–∞–ø—Ä—è–º—É—é

    post_to_publish = None

    if COINGLASS_API_KEY is None or COINGLASS_API_KEY == "":
        logger.warning("COINGLASS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /report. –ü—É–±–ª–∏–∫–∞—Ü–∏—è Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–æ–æ–±—â–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                "‚ö†Ô∏è Coinglass API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ `COINGLASS_API_KEY` –≤ —Ñ–∞–π–ª–µ `.env`, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. "
                "–ü—É–±–ª–∏–∫–∞—Ü–∏—è Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞."
            ),
        )
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /report
    elif coinglass_data_api is None:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Coinglass API –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /report. –ü—É–±–ª–∏–∫–∞—Ü–∏—è Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–æ–æ–±—â–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                "‚ùå –û—à–∏–±–∫–∞ Coinglass API!\n\n"
                "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Coinglass API –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                "–ü—É–±–ª–∏–∫–∞—Ü–∏—è Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞."
            ),
        )
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /report
    else:
        logger.info("–î–∞–Ω–Ω—ã–µ Coinglass —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ API –¥–ª—è /report. –ü—Ä–æ–¥–æ–ª–∂–∞—é.")
        post_to_publish = await generate_dashboard_post(coinglass_data_api, fear_greed_data, coingecko_data)

    if post_to_publish:
        if await publish_post_to_channel(bot, post_to_publish):
            logger.info("–ü–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª –ø–æ –∫–æ–º–∞–Ω–¥–µ /report.")
            await update.message.reply_text("–û—Ç—á–µ—Ç –ø–æ –¥–∞—à–±–æ—Ä–¥—É —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞ –≤ –∫–∞–Ω–∞–ª –ø–æ –∫–æ–º–∞–Ω–¥–µ /report.")
            await update.message.reply_text("–ü–æ—Å—Ç –ø–æ –¥–∞—à–±–æ—Ä–¥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {CHANNEL_ID}.")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ –¥–∞—à–±–æ—Ä–¥—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

async def report_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /report_admin –ø–æ–ª—É—á–µ–Ω–∞")
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º Coinglass –¥–ª—è BTC, ETH, XRP. "
                                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã (–¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏, 'N/A' –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã):\n\n"
                                   "BTC: TV=X, TL=Y, LL=A, SL=B, OI=C; \n"
                                   "ETH: TV=D, TL=E, LL=F, SL=G, OI=H; \n"
                                   "XRP: TV=I, TL=J, LL=K, SL=L, OI=M\n\n"
                                   "–ì–¥–µ TV - –û–±—â–∏–π –æ–±—ä–µ–º —Ñ—å—é—á–µ—Ä—Å–æ–≤, TL - –û–±—â–∏–π –æ–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π, LL - –û–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –ª–æ–Ω–≥, SL - –û–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π —à–æ—Ä—Ç, OI - –û—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.\n\n"
                                   "–ù–∞–ø—Ä–∏–º–µ—Ä:\nBTC: TV=500M, TL=10M, LL=6M, SL=4M, OI=100K; ETH: TV=200M, TL=5M, LL=3M, SL=2M, OI=50K; XRP: TV=100M, TL=2M, LL=1.5M, SL=0.5M, OI=20K\n\n"
                                   "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Ö –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ 'N/A'.")
    context.user_data["waiting_for_manual_coinglass_input_channel"] = True
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /report_admin.")

async def handle_admin_manual_coinglass_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
    if update.effective_user.id == ADMIN_ID and context.user_data.get("waiting_for_manual_coinglass_input_channel"):
        target_chat_id = CHANNEL_ID
        context.user_data["waiting_for_manual_coinglass_input_channel"] = False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É (—Ç–µ—Å—Ç)
    elif update.effective_user.id == ADMIN_ID and context.user_data.get("waiting_for_manual_coinglass_input_admin"):
        target_chat_id = ADMIN_ID
        context.user_data["waiting_for_manual_coinglass_input_admin"] = False
    else:
        return # –ù–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –∂–¥–∞–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞

    await update.message.reply_text("–ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ Coinglass, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    coinglass_input_text = update.message.text
    
    coinglass_parsed_data = {}
    if coinglass_input_text.strip().lower() != "n/a":
        coins_data_str = coinglass_input_text.split(';')
        for coin_str in coins_data_str:
            if ':' in coin_str:
                coin_name, details_str = coin_str.split(':', 1)
                coin_name = coin_name.strip().upper()
                details = {}
                parts = details_str.split(',')
                for part in parts:
                    if '=' in part:
                        key, value = part.split('=', 1)
                        details[key.strip()] = value.strip()
                if coin_name in ["BTC", "ETH", "XRP"]:
                    coinglass_parsed_data[coin_name] = {
                        "volume_24h": details.get("TV", "N/A"),
                        "total_liquidations_24h": details.get("TL", "N/A"),
                        "long_liquidations_24h": details.get("LL", "N/A"),
                        "short_liquidations_24h": details.get("SL", "N/A"),
                        "open_interest": details.get("OI", "N/A")
                    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å CoinGecko –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    coingecko_prices = await fetch_coingecko_data()
    if not coingecko_prices:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã —Å CoinGecko. –¶–µ–Ω—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ N/A.")
        coingecko_prices = {"BTC": "N/A", "ETH": "N/A", "XRP": "N/A"}

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã CoinGecko –∫ –¥–∞–Ω–Ω—ã–º, –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤—Ä—É—á–Ω—É—é
    for symbol in ["BTC", "ETH", "XRP"]:
        if symbol not in coinglass_parsed_data:
            coinglass_parsed_data[symbol] = {}
        coinglass_parsed_data[symbol]["current_price"] = coingecko_prices.get(symbol, "N/A")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
    fear_greed_data = await fetch_fear_greed_index()
    if not fear_greed_data:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CoinGecko –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    coingecko_data = await fetch_coingecko_data()
    if not coingecko_data:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å CoinGecko –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞. –¶–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ N/A.")
        coingecko_data = {"BTC": {"price": "N/A", "change_24h": "N/A"}, 
                            "ETH": {"price": "N/A", "change_24h": "N/A"}, 
                            "XRP": {"price": "N/A", "change_24h": "N/A"},
                            "btc_dominance": "N/A"}

    post_to_publish = await generate_dashboard_post(coinglass_parsed_data, fear_greed_data, coingecko_data)

    if post_to_publish:
        try:
            if target_chat_id == CHANNEL_ID:
                if await publish_post_to_channel(context.bot, post_to_publish):
                    logger.info("–ü–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
                    await update.message.reply_text("–û—Ç—á–µ—Ç –ø–æ –¥–∞—à–±–æ—Ä–¥—É —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Coinglass —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
                else:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–∞–Ω–∞–ª.")
                    await update.message.reply_text("–ü–æ—Å—Ç –ø–æ –¥–∞—à–±–æ—Ä–¥—É —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.")
            elif target_chat_id == ADMIN_ID:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=post_to_publish,
                    disable_web_page_preview=False,
                )
                logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
                await update.message.reply_text("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Coinglass —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ —Å —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å —É—á–µ—Ç–æ–º —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ –¥–∞—à–±–æ—Ä–¥—É —Å —É—á–µ—Ç–æ–º —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

async def report_admin_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /report_admin_test –ø–æ–ª—É—á–µ–Ω–∞")
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º Coinglass –¥–ª—è BTC, ETH, XRP –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. "
                                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã (–¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏, 'N/A' –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã):\n\n"
                                   "BTC: TV=X, TL=Y, LL=A, SL=B, OI=C; \n"
                                   "ETH: TV=D, TL=E, LL=F, SL=G, OI=H; \n"
                                   "XRP: TV=I, TL=J, LL=K, SL=L, OI=M\n\n"
                                   "–ì–¥–µ TV - –û–±—â–∏–π –æ–±—ä–µ–º —Ñ—å—é—á–µ—Ä—Å–æ–≤, TL - –û–±—â–∏–π –æ–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π, LL - –û–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –ª–æ–Ω–≥, SL - –û–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π —à–æ—Ä—Ç, OI - –û—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.\n\n"
                                   "–ù–∞–ø—Ä–∏–º–µ—Ä:\nBTC: TV=500M, TL=10M, LL=6M, SL=4M, OI=100K; ETH: TV=200M, TL=5M, LL=3M, SL=2M, OI=50K; XRP: TV=100M, TL=2M, LL=1.5M, SL=0.5M, OI=20K\n\n"
                                   "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Ö –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ 'N/A'.")
    context.user_data["waiting_for_manual_coinglass_input_admin"] = True
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ Coinglass –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /report_admin_test.")

def main():
    if not TELEGRAM_BOT_TOKEN or not CHANNEL_ID or not ADMIN_ID:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN, CHANNEL_ID –∏ ADMIN_ID –≤ .env")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(on_startup).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("report_admin", report_admin_command))
    application.add_handler(CommandHandler("report_admin_test", report_admin_test_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ Coinglass –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) & filters.User(ADMIN_ID), handle_admin_manual_coinglass_input))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_non_admin_messages))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞, –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    application.add_handler(MessageHandler(~filters.User(ADMIN_ID) & filters.ALL, handle_non_admin_messages))


    logger.info(f"–í–µ—Ä—Å–∏—è Python-Telegram-Bot: {telegram.__version__}")
    logger.info(f"{BOT_NAME} –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
